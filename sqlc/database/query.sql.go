// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const authorizedCard = `-- name: AuthorizedCard :one
SELECT user_name FROM card
WHERE uid = ? LIMIT 1
`

func (q *Queries) AuthorizedCard(ctx context.Context, uid []byte) (string, error) {
	row := q.db.QueryRowContext(ctx, authorizedCard, uid)
	var user_name string
	err := row.Scan(&user_name)
	return user_name, err
}

const getScanner = `-- name: GetScanner :one
SELECT private_key FROM scanner
WHERE uuid = ? LIMIT 1
`

func (q *Queries) GetScanner(ctx context.Context, uuid string) ([]byte, error) {
	row := q.db.QueryRowContext(ctx, getScanner, uuid)
	var private_key []byte
	err := row.Scan(&private_key)
	return private_key, err
}

const insertLog = `-- name: InsertLog :exec
INSERT INTO logs 
(type, message, scanner, card)
VALUES
(?, ?, ?, ?)
`

type InsertLogParams struct {
	Type    LogsType
	Message sql.NullString
	Scanner string
	Card    []byte
}

func (q *Queries) InsertLog(ctx context.Context, arg InsertLogParams) error {
	_, err := q.db.ExecContext(ctx, insertLog,
		arg.Type,
		arg.Message,
		arg.Scanner,
		arg.Card,
	)
	return err
}
